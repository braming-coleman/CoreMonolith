// <auto-generated />
using System;
using CoreMonolith.Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoreMonolith.Infrastructure.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241222030553_permission_overhaul")]
    partial class permission_overhaul
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CoreMonolith.Domain.Models.Access.PermissionGroupPermissions.PermissionGroupPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PermissionGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_group_id");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_id");

                    b.HasKey("Id")
                        .HasName("pk_permission_group_permissions");

                    b.HasIndex("PermissionGroupId")
                        .HasDatabaseName("ix_permission_group_permissions_permission_group_id");

                    b.HasIndex("PermissionId", "PermissionGroupId")
                        .IsUnique()
                        .HasDatabaseName("ix_permission_group_permissions_permission_id_permission_group");

                    b.ToTable("permission_group_permissions", "access");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0193ec2f-13a3-7c0c-af57-eaeab6d451d9"),
                            PermissionGroupId = new Guid("0193ec1f-35c9-723c-a203-67c5e4e0eb75"),
                            PermissionId = new Guid("0193eb73-d636-750a-a839-5571f30fd6b2")
                        },
                        new
                        {
                            Id = new Guid("0193ec2f-13a3-70f6-bba2-5e63aaa12173"),
                            PermissionGroupId = new Guid("0193ec1f-35c9-723c-a203-67c5e4e0eb75"),
                            PermissionId = new Guid("0193eb73-d636-7aed-bbbc-963672568d66")
                        },
                        new
                        {
                            Id = new Guid("0193ec2f-13a3-7a5c-83fb-d2b822708e25"),
                            PermissionGroupId = new Guid("0193ec1f-35c9-723c-a203-67c5e4e0eb75"),
                            PermissionId = new Guid("0193eb73-d636-770f-9d4d-6f2c6d9ccac3")
                        },
                        new
                        {
                            Id = new Guid("0193ec2f-13a3-7c6d-a09d-4948b5dc81e2"),
                            PermissionGroupId = new Guid("0193ec1f-35c9-723c-a203-67c5e4e0eb75"),
                            PermissionId = new Guid("0193eb73-d636-79e6-b669-87236dbbaa96")
                        },
                        new
                        {
                            Id = new Guid("0193ec2f-13a3-7c79-adfa-97611eac8222"),
                            PermissionGroupId = new Guid("0193ec1f-35c9-723c-a203-67c5e4e0eb75"),
                            PermissionId = new Guid("0193eb73-d636-72c1-b3fb-52c82f3593ac")
                        },
                        new
                        {
                            Id = new Guid("0193ec2f-13a3-70fd-8d28-2b103e51e8ae"),
                            PermissionGroupId = new Guid("0193ec1f-35c9-723c-a203-67c5e4e0eb75"),
                            PermissionId = new Guid("0193eb73-d636-7150-a2bc-13bde0f65734")
                        },
                        new
                        {
                            Id = new Guid("0193ec2f-13a3-79e7-acd9-861e9bf5d943"),
                            PermissionGroupId = new Guid("0193ec1f-35c9-747a-91f1-5601ca02c36f"),
                            PermissionId = new Guid("0193eb73-d636-750a-a839-5571f30fd6b2")
                        },
                        new
                        {
                            Id = new Guid("0193ec2f-13a3-77e6-9b8b-81e474ef00dc"),
                            PermissionGroupId = new Guid("0193ec1f-35c9-747a-91f1-5601ca02c36f"),
                            PermissionId = new Guid("0193eb73-d636-7aed-bbbc-963672568d66")
                        },
                        new
                        {
                            Id = new Guid("0193ec2f-13a3-7127-b499-fcef873fa5db"),
                            PermissionGroupId = new Guid("0193ec1f-35c9-747a-91f1-5601ca02c36f"),
                            PermissionId = new Guid("0193eb73-d636-72c1-b3fb-52c82f3593ac")
                        });
                });

            modelBuilder.Entity("CoreMonolith.Domain.Models.Access.PermissionGroups.PermissionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.HasKey("Id")
                        .HasName("pk_permission_groups");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasDatabaseName("ix_permission_groups_code");

                    b.ToTable("permission_groups", "access");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0193ec1f-35c9-723c-a203-67c5e4e0eb75"),
                            Code = "admin",
                            Description = "Contains *all* permissions."
                        },
                        new
                        {
                            Id = new Guid("0193ec1f-35c9-747a-91f1-5601ca02c36f"),
                            Code = "user",
                            Description = "Contains non-admin permissions."
                        });
                });

            modelBuilder.Entity("CoreMonolith.Domain.Models.Access.Permissions.Permission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("key");

                    b.HasKey("Id")
                        .HasName("pk_permissions");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasDatabaseName("ix_permissions_key");

                    b.ToTable("permissions", "access");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0193eb73-d636-750a-a839-5571f30fd6b2"),
                            Description = "Read access to [user] resource",
                            Key = "user:read"
                        },
                        new
                        {
                            Id = new Guid("0193eb73-d636-7aed-bbbc-963672568d66"),
                            Description = "Write access to [user] resource",
                            Key = "user:write"
                        },
                        new
                        {
                            Id = new Guid("0193eb73-d636-770f-9d4d-6f2c6d9ccac3"),
                            Description = "Read access to [permission-group] resource",
                            Key = "permission-group:read"
                        },
                        new
                        {
                            Id = new Guid("0193eb73-d636-79e6-b669-87236dbbaa96"),
                            Description = "Write access to [permission-group] resource",
                            Key = "permission-group:write"
                        },
                        new
                        {
                            Id = new Guid("0193eb73-d636-72c1-b3fb-52c82f3593ac"),
                            Description = "Read access to [permission] resource",
                            Key = "permission:read"
                        },
                        new
                        {
                            Id = new Guid("0193eb73-d636-7150-a2bc-13bde0f65734"),
                            Description = "Write access to [permission] resource",
                            Key = "permission:write"
                        });
                });

            modelBuilder.Entity("CoreMonolith.Domain.Models.Access.UserPermissionGroups.UserPermissionGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("PermissionGroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("permission_group_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_permission_groups");

                    b.HasIndex("PermissionGroupId")
                        .HasDatabaseName("ix_user_permission_groups_permission_group_id");

                    b.HasIndex("UserId", "PermissionGroupId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_permission_groups_user_id_permission_group_id");

                    b.ToTable("user_permission_groups", "access");
                });

            modelBuilder.Entity("CoreMonolith.Domain.Models.Access.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<Guid?>("ExternalId")
                        .HasColumnType("uuid")
                        .HasColumnName("external_id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("ExternalId")
                        .IsUnique()
                        .HasDatabaseName("ix_users_external_id");

                    b.ToTable("users", "access");
                });

            modelBuilder.Entity("CoreMonolith.Domain.Models.Access.PermissionGroupPermissions.PermissionGroupPermission", b =>
                {
                    b.HasOne("CoreMonolith.Domain.Models.Access.PermissionGroups.PermissionGroup", "PermissionGroup")
                        .WithMany("PermissionGroupPermissions")
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permission_group_permissions_permission_groups_permission_g");

                    b.HasOne("CoreMonolith.Domain.Models.Access.Permissions.Permission", "Permission")
                        .WithMany("PermissionGroupPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_permission_group_permissions_permissions_permission_id");

                    b.Navigation("Permission");

                    b.Navigation("PermissionGroup");
                });

            modelBuilder.Entity("CoreMonolith.Domain.Models.Access.UserPermissionGroups.UserPermissionGroup", b =>
                {
                    b.HasOne("CoreMonolith.Domain.Models.Access.PermissionGroups.PermissionGroup", "PermissionGroup")
                        .WithMany("UserPermissionGroups")
                        .HasForeignKey("PermissionGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_permission_groups_permission_groups_permission_group_id");

                    b.HasOne("CoreMonolith.Domain.Models.Access.Users.User", "User")
                        .WithMany("UserPermissionGroups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_permission_groups_users_user_id");

                    b.Navigation("PermissionGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CoreMonolith.Domain.Models.Access.PermissionGroups.PermissionGroup", b =>
                {
                    b.Navigation("PermissionGroupPermissions");

                    b.Navigation("UserPermissionGroups");
                });

            modelBuilder.Entity("CoreMonolith.Domain.Models.Access.Permissions.Permission", b =>
                {
                    b.Navigation("PermissionGroupPermissions");
                });

            modelBuilder.Entity("CoreMonolith.Domain.Models.Access.Users.User", b =>
                {
                    b.Navigation("UserPermissionGroups");
                });
#pragma warning restore 612, 618
        }
    }
}
